#!/usr/bin/env bash
set -euo pipefail

# This file contains functions that make it easier to for me to
# access my SSH a new machine.
# Example usage:
# $ get_ssh_key "Personal" "git commit signing key"
# To list all SSH keys:
# $ op item list --categories 'SSH Key'

vault_name="${1:-}"
item_name="${2:-}"

if [ -z "$vault_name" ]; then
	echo "vault_name not passed as 1st argument. Nothing was done."
	exit 1
fi

if [ -z "$item_name" ]; then
	echo "item_name not passed as 2nd argument. Nothing was done."
	exit 1
fi

# First try to get custom key name.
private_key_name="$(op read "op://$vault_name/$item_name/name" 2>/dev/null || printf "id_ed25519")"
public_key_name="$private_key_name.pub"

if [ -f "$private_key_name" ]; then
	echo "$private_key_name already exists. Nothing was done."
	exit 2
fi

if [ -f "$public_key_name" ]; then
	echo "$public_key_name already exists. Nothing was done."
	exit 2
fi

op read \
	--out-file "$private_key_name" \
	"op://$vault_name/$item_name/private key?ssh-format=openssh"

# Apply workaround for:
# https://1password.community/discussion/142733/bad-characters-when-exporting-ssh-private-key-via-cli
private_key_content="$(cat "$private_key_name")"
echo "$private_key_content" | tr -d '\r' >"$private_key_name"

op read \
	--out-file "$public_key_name" \
	"op://$vault_name/$item_name/public key"

# Add a comment (if it exists)
comment="$(op read "op://$vault_name/$item_name/comment" 2>/dev/null || true)"
if [ -n "$comment" ]; then
	pubkey_content="$(tr -d '\n' <"$public_key_name")"
	true >"$public_key_name"
	printf "%s %s\n" "$pubkey_content" "$comment" >"$public_key_name"
fi
